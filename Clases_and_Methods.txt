 Object:new()
 Screen:fbinfo()
 Screen:new()
 Screen:checkOverscan()
 Screen:checkSize(w, h, x, y)
 Screen:bcm_init(w, h, x, y)
 Screen:deinit()
 Screen:restoreSize()
 Screen:move(w, h, x, y)
 Screen:egl_init()
 Screen:setClearColor(r, g, b, alpha)
 Screen:cullFace()
 Screen:init(w, h, x, y)
 Screen:getFrameCount()
 Screen:resetFrameCount()
 Screen:getAspect()
 Screen:getWidth()
 Screen:getHeight()
 Screen:viewport()
 Screen:clear()
 Screen:clearDepthBuffer()
 Screen:update()
 Screen:swapInterval(interval)
 Screen:screenShot(filename)
 Space:new()
 Space:addNode(parent_node, name)
 Space:delNode(name)
 Space:scanSkeletons()
 Space:findNode(name)
 Space:listNode()
 Space:now()
 Space:timerStart()
 Space:uptime()
 Space:deltaTime()
 Space:count()
 Space:setLight(node)
 Space:setLightType(light_type)
 Space:getLightType()
 Space:setEye(node)
 Space:draw(eye_node)
 Space:drawBones()
 Shape:new()
 Shape:ClassShader(shader)
 Shape:ClassTexture(texture)
 Shape:updateBoundingBox(x, y, z)
 Shape:getBoundingBox()
 Shape:printBoundingBox()
 Shape:setAutoCalcNormals(flag)
 Shape:referShape(shape)
 Shape:copyShaderParamsFromShape(shape)
 Shape:setAnimation(anim)
 Shape:getAnimation()
 Shape:getVertexCount()
 Shape:getTriangleCount()
 Shape:shaderParameter(key, value)
 Shape:setShader(shader)
 Shape:setTexture(texture)
 Shape:setTextureMappingMode(mode)
 Shape:setTextureMappingAxis(axis)
 Shape:setTextureScale(scale_u, scale_v)
 Shape:endShape()
 Shape:releaseObjects()
 Shape:setSkeleton(skeleton)
 Shape:getSkeleton()
 Shape:hide(true_or_false)
 Shape:draw(modelview, normal)
 Shape:setVertex(x, y, z)
 Shape:addVertex(x, y, z)
 Shape:addVertexUV(x, y, z, u, v)
 Shape:addVertexPosUV(pos, uv)
 Shape:setVertNormal(vn, x, y, z)
 Shape:getVertNormal(vn)
 Shape:getVertPosition(vn)
 Shape:addVertexWeight(vn, ind, wt)
 Shape:checkAltVertex(p)
 Shape:addTriangle(p0, p1, p2)
 Shape:addPlane(indices)
 Shape:calcUV(x, y, z)
 Shape:revolution(latitude, longitude, verts, spherical)
 Shape:sphere(radius, latitude, longitude)
 Shape:donut(radius, radiusTube, latitude, longitude)
 Shape:cone(height, radius, n)
 Shape:truncated_cone(height, radiusTop, radiusBottom, n)
 Shape:double_cone(height, radius, n)
 Shape:prism(height, radius, n)
 Shape:arrow(length, head, width, n)
 Shape:cuboid(size_x, size_y, size_z)
 Shape:mapCuboid(size_x, size_y, size_z)
 Shape:cube(size)
 Shape:mapCube(size)
 Shape:simpleBone(a)
 Shape:listVertex(vn)
 Shape:listVertexAll()
 Shape:printVertex()
 Action:new(anim)
 Action:addKeyPattern(name, time, from, to)
 Action:addAction(name, pattern_list)
 Action:setVerbose(true_or_false)
 Action:startAction(action_name)
 Action:getPattern()
 Action:playAction()
 Action:startTimeFromTo(pat)
 Animation:new(name)
 Animation:setTimes(times)
 Animation:setBonePoses(bone_poses)
 Animation:addBoneName(bone_name)
 Animation:getBoneName(i)
 Animation:getType()
 Animation:getName()
 Animation:countPoses()
 Animation:getNoOfBones()
 Animation:close()
 Animation:setData(skeleton, bind_shape_matrix)
 Animation:appendData(time, key_frame_no)
 Animation:getPeriodFromTo(from, to)
 Animation:setPose(key)
 Animation:transitionTo(time, keyFrom, keyTo)
 Animation:start()
 Animation:play()
 Animation:playFps(frame_per_sec)
 Animation:startFromTo(keyFrom, keyTo)
 Animation:startTimeFromTo(time, keyFrom, keyTo)
 Animation:list(print_matrix)
 Schedule:new()
 Schedule:addTask(name)
 Schedule:delTask(task)
 Schedule:getEmptyTask()
 Schedule:getNoOfTasks()
 Schedule:getTask(n)
 Schedule:getTaskByName(name)
 Schedule:pause()
 Schedule:start()
 Schedule:startFrom(start_ip)
 Schedule:startFromTo(start_ip, stop_ip)
 Schedule:doCommandFps(frame_per_sec)
 Schedule:doCommand()
 Schedule:doOneCommand(ip, rate)
 Schedule:directExecution(time, command, args, start_ip, stop_ip)
 Schedule:setSpeed(time_scale)
 Task:new(name, no)
 Task:setTargetObject(target)
 Task:addCommand(time, func, arg)
 Task:setTime(ip, time)
 Task:getTime(ip)
 Task:getName()
 Task:getNoOfCommands()
 Task:setCommand(command_table)
 Task:partial_arg(arg, total_time, dtime)
 Task:controlCommand(command, arg)
 Task:execCommand(doarg)
 Task:getNextCommand()
 Task:start()
 Task:startFrom(start_ip)
 Task:startFromTo(start_ip, stop_ip)
 Task:execute(delta_msec)
 Task:executeOneCommand(ip, arg_rate)
 Task:directExecution(command, doarg)
 Task:insertCurrentCommand(time, command, arg, start_ip, stop_ip)
 CoordinateSystem:new(parent_node, name)
 CoordinateSystem:print(str, q, pos)
 CoordinateSystem:printMoveRange()
 CoordinateSystem:setType(type)
 CoordinateSystem:getType()
 CoordinateSystem:addChild(child)
 CoordinateSystem:getNoOfChildren()
 CoordinateSystem:getChild(n)
 CoordinateSystem:setParent(parent)
 CoordinateSystem:getParent()
 CoordinateSystem:setName(name)
 CoordinateSystem:getName()
 CoordinateSystem:setAttitude(head, pitch, bank)
 CoordinateSystem:getWorldAttitude()
 CoordinateSystem:getLocalAttitude()
 CoordinateSystem:getWorldPosition()
 CoordinateSystem:getPosition()
 CoordinateSystem:setPosition(x, y, z)
 CoordinateSystem:setPositionX(x)
 CoordinateSystem:setPositionY(y)
 CoordinateSystem:setPositionZ(z)
 CoordinateSystem:rotateX(degree)
 CoordinateSystem:rotateY(degree)
 CoordinateSystem:rotateZ(degree)
 CoordinateSystem:rotate(head, pitch, bank)
 CoordinateSystem:move(x, y, z)
 CoordinateSystem:setMatrix()
 CoordinateSystem:setWorldMatrix()
 CoordinateSystem:setWorldMatrixAll(wmat)
 CoordinateSystem:getWorldMatrix()
 CoordinateSystem:setByMatrix(matrix)
 CoordinateSystem:setQuat(quat)
 CoordinateSystem:getQuat()
 CoordinateSystem:getQuatFromMatrix()
 CoordinateSystem:getPositionFromMatrix()
 CoordinateSystem:detach()
 CoordinateSystem:attach(parent_node)
 CoordinateSystem:inverse(new_parent)
 CoordinateSystem:distance(node)
 CoordinateSystem:putRotation(head, pitch, bank)
 CoordinateSystem:putRotationByQuat(quat)
 CoordinateSystem:putAttitudeByQuat(quat)
 CoordinateSystem:putAttitude(head, pitch, bank)
 CoordinateSystem:putDistance(x, y, z)
 CoordinateSystem:putRotTrans(quat, pos)
 CoordinateSystem:putRotTransByMatrix(matrix)
 CoordinateSystem:execRotation(t)
 CoordinateSystem:execTranslation(t)
 CoordinateSystem:doRotation(t)
 CoordinateSystem:doTranslation(t)
 CoordinateSystem:doRotTrans(t)
 Node:new(parent_bone, name)
 Node:setParent(parent)
 Node:hide(true_or_false)
 Node:setAttachable(true_or_false)
 Node:detach()
 Node:attach(parent_node)
 Node:setWeights()
 Node:setRestPosition(x, y, z)
 Node:setRestByMatrix(matrix)
 Node:rotateRest(head, pitch, bank)
 Node:moveRest(x, y, z)
 Node:setRestMatrix()
 Node:setModelMatrixAll(mmat)
 Node:setGlobalMatrixAll(wmat)
 Node:getRestMatrix()
 Node:getModelMatrix()
 Node:getBofMatrix()
 Node:getGlobalMatrix()
 Node:addShape(shape)
 Node:delShape()
 Node:setShape(shape)
 Node:getShape(n)
 Node:getShapeCount()
 Node:draw(view_matrix, light_vec)
 Node:drawBones()
 Skeleton:new()
 Skeleton:clone()
 Skeleton:addBone(parent_bone, name)
 Skeleton:setBoneShape(shape)
 Skeleton:setAttachable(true_or_false)
 Skeleton:isAttachable()
 Skeleton:isShown()
 Skeleton:showBone(true_or_false)
 Skeleton:setBoneOrder(names)
 Skeleton:getBoneOrder()
 Skeleton:getBoneNo(name)
 Skeleton:getBoneCount()
 Skeleton:getBone(name)
 Skeleton:getBoneFromJointNo(num)
 Skeleton:printJointNames()
 Skeleton:printBone()
 Skeleton:getJointFromBone(bone)
 Skeleton:getBoneNoFromBone(bone)
 Skeleton:bindRestPose()
 Skeleton:updateMatrixPalette()
 Skeleton:listBones()
 Skeleton:printMatrixPalette()
 Skeleton:drawBones(view_matrix)
 Matrix:new()
 Matrix:makeUnit()
 Matrix:makeZero()
 Matrix:set(row, column, val)
 Matrix:check()
 Matrix:setBulk(numtable)
 Matrix:setBulkWithOffset(numtable, offset)
 Matrix:get(row, column)
 Matrix:clone()
 Matrix:copyFrom(mat)
 Matrix:convFloat()
 Matrix:setByQuat(quat)
 Matrix:setByEulerXYZ(rx, ry, rz)
 Matrix:matToEulerXYZ()
 Matrix:setByEuler(head, pitch, bank)
 Matrix:matToEuler()
 Matrix:position(position)
 Matrix:getPosition()
 Matrix:add(mb)
 Matrix:mul_(mb)
 Matrix:mul(mb)
 Matrix:lmul(mb)
 Matrix:makeProjectionMatrix(near, far, vfov, ratio)
 Matrix:makeProjectionMatrixWH(near, far, width, height)
 Matrix:makeProjectionMatrixOrtho(near, far, width, height)
 Matrix:inverse()
 Matrix:transpose()
 Matrix:makeView(w)
 Matrix:tmul3x3Vector(v)
 Matrix:mul3x3Vector(v)
 Matrix:mulVector(v)
 Matrix:print(f)
 Quat:new()
 Quat:mulQuat(qb)
 Quat:lmulQuat(qb)
 Quat:condugate()
 Quat:normalize()
 Quat:setRotateX(degree)
 Quat:setRotateY(degree)
 Quat:setRotateZ(degree)
 Quat:eulerToQuat(head, pitch, bank)
 Quat:dotProduct(qr)
 Quat:negate()
 Quat:slerp(a, b, t)
 Quat:matrixToQuat(m)
 Quat:print()
 Quat:clone()
 Quat:copyFrom(quat)
 Quat:check()
 Quat:quatToEuler()
 FrameBufferObject:create(texture_class)
 FrameBufferObject:setClearColor(r, g, b, alpha)
 FrameBufferObject:clear()
 FrameBufferObject:endDraw()
 FrameBufferObject:destroy()
 FrameBufferObject:writeToFile()
 Texture:new()
 Texture:setupTexture()
 Texture:setClamp()
 Texture:readImageFromFile(textureFile)
 Texture:setImage(image, width, height, ncol)
 Texture:writeImageToFile()
 Texture:createTexture(width, height, ncol)
 Texture:fillTexture(r, g, b, a)
 Texture:point(x, y, color)
 Texture:assignTexture()
 Texture:name()
 Texture:active()
 Font:new()
 Font:initShaderParameter()
 Font:setTextureUnit(tex_unit)
 Font:setChar(x, y, ch)
 Font:setPos(x, y)
 Font:setColor(r, g, b)
 Font:setScale(scale)
 Font:getScale()
 Text:new()
 Text:goTo(x, y)
 Text:saveCursor()
 Text:restoreCursor()
 Text:scrollUp()
 Text:incCursorPosition()
 Text:write(str)
 Text:writef(fmt, ...)
 Text:writeAt(x, y, str)
 Text:writefAt(x, y, fmt, ...)
 Text:clearLine(lineNo)
 Text:clearScreen()
 Text:fontTest()
 Text:setScale(scale)
 Text:makeShape()
 Text:init(texture_file)
 Text:initFont()
 Text:getDefaultFontImage()
 Text:drawScreen()
 Message:new()
 Message:init(font_texture_file)
 Message:setMessage(n, x, y, text)
 Message:writeMessage(x, y, text)
 Message:delMessage(n)
 Message:clearMessages()
 Message:listMessages()
 Message:setColor(r, g, b)
 Message:drawScreen()
 Shader:new()
 Shader:loadShader(type, shaderSource)
 Shader:initShaders()
 Shader:setDefaultParam(key, value)
 Shader:updateParam(param, key, updateFunc)
 Shader:initShaderParameter()
 Shader:doParameter(param)
 Shader:useProgram()
 Shader:init()
 Background:new()
 Background:initShaderParameter()
 Background:setTextureUnit(tex_unit)
 Background:setColor(r, g, b)
 Background:setAspect(aspect)
 Background:setWindow(left, top, width, height)
 Background:setOrder(order)
 Background:init()
 Background:setBackground(texture)
 Background:makeShape (scale)
 Background:drawScreen()
 BonePhong:new()
 BonePhong:initShaderParameter()
 BonePhong:init()
 BonePhong:setDefaultParam(key, value)
 BonePhong:setLightPosition(positionAndType)
 BonePhong:useTexture(flag)
 BonePhong:setTextureUnit(tex_unit)
 BonePhong:setEmissive(flag)
 BonePhong:setAmbientLight(intensity)
 BonePhong:setSpecular(intensity)
 BonePhong:setSpecularPower(power)
 BonePhong:setColor(color)
 BonePhong:setProjectionMatrix(m)
 BonePhong:setModelViewMatrix(m)
 BonePhong:setNormalMatrix(m)
 BonePhong:updateTexture(param)
 BonePhong:setHasBone(flag)
 BonePhong:setMatrixPalette(matrixPalette)
 BonePhong:doParameter(param)
 Phong:new()
 Phong:initShaderParameter()
 Phong:init()
 Phong:setDefaultParam(key, value)
 Phong:setLightPosition(positionAndType)
 Phong:useTexture(flag)
 Phong:setTextureUnit(tex_unit)
 Phong:setEmissive(flag)
 Phong:setAmbientLight(intensity)
 Phong:setSpecular(intensity)
 Phong:setSpecularPower(power)
 Phong:setColor(color)
 Phong:setProjectionMatrix(m)
 Phong:setModelViewMatrix(m)
 Phong:setNormalMatrix(m)
 Phong:updateTexture(param)
 Phong:doParameter(param)
 Collada:new()
 Collada:printf(fmt, ...)
 Collada:getMeshes()
 Collada:getMeshCount()
 Collada:releaseMeshes()
 Collada:parseText(string_to_parse)
 Collada:parseArgs(string_to_parse)
 Collada:getNextTag()
 Collada:skip(tag)
 Collada:skipToClosingTag(element)
 Collada:asset(tag)
 Collada:library_cameras(tag)
 Collada:library_lights(tag)
 Collada:library_images(tag)
 Collada:library_effects(tag)
 Collada:library_materials(tag)
 Collada:getNumList(tag_id)
 Collada:getList(tag_id)
 Collada:source()
 Collada:getPolygonData(p, pointer, data_count)
 Collada:geo_mesh(id)
 Collada:extra(tag)
 Collada:library_geometries(tag)
 Collada:controller_skin(source_name)
 Collada:library_controllers(tag)
 Collada:node(tag, parent_frame)
 Collada:library_visual_scenes(tag)
 Collada:checkAnimationType(id)
 Collada:animation(tag, parent)
 Collada:library_animations(tag)
 Collada:scene(tag)
 Collada:getAnimation()
 Collada:parse(text, verbose)
 ColladaShape:new()
 ColladaShape:setBones(mesh, shape, verts, newindex)
 ColladaShape:setShape(nmesh, bone_enable, texture_select)
 ColladaShape:makeShapes(bone_enable, verbose, tex_select)
 Frame:new(parent, name)
 Frame:setByMatrix(matrix)
 Frame:setWeights()
 Frame:setType(type_name)
 Frame:getType()
 Frame:getName()
 Frame:findFrame(name)
 Frame:getNoOfBones(names)
 Frame:findChildFrames(names)
 Frame:getFramesFromNames(joint_names)
 Frame:copyToBone(joint_names, bind_shape_matrix,
 Frame:list(level)
 Frame:listAll(level)
 Mesh:new(frame)
 Mesh:setName(name)
 Mesh:getName()
 Mesh:setVertices(verts)
 Mesh:getVertices()
 Mesh:setPolygons(polygons)
 Mesh:getPolygons()
 Mesh:setTextureCoord(texure_coord)
 Mesh:getTextureCoord()
 Mesh:setSkinWeights(skin_weights)
 Mesh:getSkinWeights()
 Mesh:setNormals(normals)
 Mesh:getNormals()
 Mesh:setJointNames(joint_names)
 Mesh:getJointNames()
 Mesh:setBindPoseMatrices(bindPoseMatrices)
 Mesh:getBindPoseMatrices()
 Mesh:setBindShapeMatrix(bind_shape_matrix)
 Mesh:getBindShapeMatrix()
 Mesh:updateBoundingBox(x, y, z)
 Mesh:printInfo()
 Stack:new()
 Stack:push(contents)
 Stack:pop()
 Stack:top()
 Stack:count()
